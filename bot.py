import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from yookassa import Configuration, Payment
from flask import Flask, request, jsonify

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://telegram-bot-2h7v.onrender.com')
PORT = int(os.getenv('PORT', 443))
CHANNEL_INVITE_LINK = os.getenv('CHANNEL_INVITE_LINK')
YOOKASSA_SHOP_ID = os.getenv('YOOKASSA_SHOP_ID')
YOOKASSA_SECRET_KEY = os.getenv('YOOKASSA_SECRET_KEY')
SUPPORT_CHAT_URL = os.getenv('SUPPORT_CHAT_URL', 'https://t.me/manemanvelovna')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([TELEGRAM_BOT_TOKEN, WEBHOOK_URL, YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆK–∞—Å—Å—ã
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.route('/payment-webhook', methods=['POST'])
def payment_webhook():
    data = request.json
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞: {data}")

    if data.get('event') == 'payment.succeeded':
        user_id = data['object']['metadata'].get('user_id')
        if user_id:
            application.create_task(send_access_link(user_id))
            return jsonify({'status': 'success'}), 200
    logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id")
    return jsonify({'status': 'error'}), 400

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–æ—Å—Ç—É–ø–∞
async def send_access_link(user_id):
    invite_message = (
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n"
        f"–í–æ—Ç –≤–∞—à–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL_INVITE_LINK}"
    )
    await application.bot.send_message(chat_id=user_id, text=invite_message)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
def generate_payment_link(user_id):
    try:
        payment = Payment.create({
            "amount": {"value": "2990.00", "currency": "RUB"},
            "confirmation": {
                "type": "redirect",
                "return_url": f"{WEBHOOK_URL}/payment-webhook"
            },
            "capture": True,
            "description": "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
            "metadata": {"user_id": str(user_id)}
        })
        payment_link = payment.confirmation.confirmation_url
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {payment_link}")
        return payment_link
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [["–û–ø–ª–∞—Ç–∏—Ç—å –î–æ—Å—Ç—É–ø", "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è‚ú®\n"
        "–≠—Ç–æ –≤–∞—à –±–æ—Ç, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–±—É—á–∞—é—â–∏–π –∫–∞–Ω–∞–ª.\n\n"
        "–ü–æ–∫—É–ø–∫–∞ –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞‚ô•Ô∏è"
    )
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_choice = update.message.text

    if user_choice == "–û–ø–ª–∞—Ç–∏—Ç—å –î–æ—Å—Ç—É–ø":
        payment_link = generate_payment_link(update.message.chat_id)
        if payment_link:
            await update.message.reply_text(
                f"üéâ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
                f"üí≥ **–¶–µ–Ω–∞:** 2990‚ÇΩ\n"
                f"üìÖ **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** –ù–∞–≤—Å–µ–≥–¥–∞\n\n"
                f"[üîó –û–ø–ª–∞—Ç–∏—Ç—å –î–æ—Å—Ç—É–ø]({payment_link})",
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    elif user_choice == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ":
        channel_info_text = (
            "üìö **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:**\n"
            "üé• –£–∑–Ω–∞–π—Ç–µ –≤—Å–µ —Ñ–∏—à–∫–∏ –≤–µ–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:\n\n"
            "üí° **–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:**\n"
            "‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            "‚Ä¢ –õ–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Å—ä—ë–º–æ–∫\n"
            "‚Ä¢ –†–∞–∑–±–æ—Ä—ã –≤–∏–¥–µ–æ Reels\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "‚Ä¢ –õ–∞–π—Ñ—Ö–∞–∫–∏ –ø–æ –≤–∏–¥–µ–æ\n\n"
            "üî• **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è –≤—Å–µ–≥–¥–∞!**"
        )
        await update.message.reply_text(channel_info_text, parse_mode="Markdown")

    elif user_choice == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        button = InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", url=SUPPORT_CHAT_URL)
        inline_reply_markup = InlineKeyboardMarkup([[button]])
        await update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
            reply_markup=inline_reply_markup
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ Flask —á–µ—Ä–µ–∑ Waitress
    from waitress import serve
    serve(app, host="0.0.0.0", port=PORT)
